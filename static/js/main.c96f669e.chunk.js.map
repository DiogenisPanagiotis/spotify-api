{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","componentDidMount","getAuth","a","headers","Accept","auth","username","password","data","grant_type","axios","post","qs","stringify","response","setState","token","access_token","console","log","handleSubmit","state","input","type","fetch","then","res","json","items","results","handleInput","e","target","value","handleFilterType","handleSort","reverse","renderResults","className","map","result","key","album","artists","images","name","release_date","href","url","artist","date","split","src","this","placeholder","onChange","onKeyPress","handleKeyPress","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2TA0IeA,G,wDAjIZ,aAAe,IAAD,8BACf,gBASDC,kBAAoB,WACnB,EAAKC,WAXU,EAchBA,QAdgB,sBAcN,gCAAAC,EAAA,6DAEHC,EAAU,CACfA,QAAS,CACRC,OAAQ,mBACR,eAAgB,qCAEfC,KAAM,CACPC,SA1Ba,mCA2BbC,SA1BiB,qCA8BbC,EAAO,CACZC,WAAY,sBAdJ,kBAkBeC,IAAMC,KAC5B,yCACAC,IAAGC,UAAUL,GACbL,GArBO,OAkBFW,EAlBE,OAuBN,EAAKC,SAAS,CAAEC,MAAOF,EAASN,KAAKS,eAvB/B,gDAyBRC,QAAQC,IAAR,MAzBQ,yDAdM,EA4ChBC,aAAe,WAAO,IAAD,EACW,EAAKC,MAA5BC,EADY,EACZA,MAAON,EADK,EACLA,MAAOO,EADF,EACEA,KACjBD,GACLE,MAAM,kDAAD,OAAmDR,EAAnD,cAA8DM,EAA9D,iBAA4EC,EAA5E,wBACHE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAjB,GACLU,QAAQC,IAAIX,EAAK,GAAD,OAAIe,EAAJ,MAAaK,OAC7B,EAAKb,SAAS,CACbc,QAASrB,EAAK,GAAD,OAAIe,EAAJ,MAAaK,YApDd,EAyDhBE,YAAc,SAACC,GACd,EAAKhB,SAAS,CACbO,MAAOS,EAAEC,OAAOC,SA3DF,EA+DhBC,iBAAmB,SAACH,GACnB,EAAKhB,SAAS,CACbQ,KAAMQ,EAAEC,OAAOC,SAjED,EAqEhBE,WAAa,WACZ,IAAMN,EAAU,EAAKR,MAAMQ,QAAQO,UACnC,EAAKrB,SAAS,CAAEc,aAvED,EA0EhBQ,cAAgB,WAAO,IACdR,EAAY,EAAKR,MAAjBQ,QACR,OACC,yBAAKS,UAAU,WACbT,EAAQU,KAAI,SAACC,EAAQC,GACrB,IAAMjC,EAAOgC,EAAOE,MAAQF,EAAOE,MAAQF,EACnCG,EAAwCnC,EAAxCmC,QAASC,EAA+BpC,EAA/BoC,OAAQC,EAAuBrC,EAAvBqC,KAAMC,EAAiBtC,EAAjBsC,aACzBC,EAAOH,EAAO,GAAGI,IACjBC,EAASN,EAAUA,EAAQ,GAAGE,KAAO,KACrCK,EAAOJ,EAAY,UAAMA,EAAaK,MAAM,KAAK,IAAO,KAC9D,OACC,yBAAKb,UAAU,SAASG,IAAKA,GAC5B,yBAAKH,UAAU,eAAec,IAAKL,IACnC,yBAAKT,UAAU,gBAAgBO,GAC9BI,EAAS,yBAAKX,UAAU,iBAAiBW,GAAgB,GACzDH,EAAe,yBAAKR,UAAU,eAAeY,GAAc,SAvFjE,EAAK7B,MAAQ,CACZC,MAAO,GACPN,MAAO,GACPO,KAAM,QACNM,QAAS,IANK,E,qDAkGf,IAAMA,EAAUwB,KAAKhB,gBAClB,OACF,yBAAKC,UAAU,OACd,yBAAKA,UAAU,oBACd,yBAAKA,UAAU,YAAf,UACA,2BACCgB,YAAY,yBACZhB,UAAU,SACViB,SAAUF,KAAKvB,YACf0B,WAAYH,KAAKI,iBAElB,4BAAQnB,UAAU,SAASiB,SAAUF,KAAKnB,kBACzC,4BAAQD,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,UAED,yBAAKK,UAAU,SAASoB,QAASL,KAAKjC,cAAtC,WAED,yBAAKkB,UAAU,qBACd,yBAAKA,UAAU,YAAf,WACA,4BAAQA,UAAU,OAAOiB,SAAUF,KAAKlB,YACvC,4BAAQF,MAAM,SAAd,aACA,4BAAQA,MAAM,UAAd,eAEAJ,Q,GA3HY8B,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.c96f669e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport qs from 'qs';\nimport './App.css';\n\nconst clientId = '4e2a6912b9e045808dbca2542fdf923c';\nconst clientSecret = '63fd10cdcb314cacb362454eacd4b803';\n\nclass App extends Component {\n  \tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinput: '',\n\t\t\ttoken: '',\n\t\t\ttype: 'album',\n\t\t\tresults: [],\n\t\t}\n\t}\n\n\tcomponentDidMount = () => {\n\t\tthis.getAuth();\n\t}\n\n\tgetAuth = async () => {\n\n\t\tconst headers = {\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t  \t},\n\t\t  \tauth: {\n\t\t\t\tusername: clientId,\n\t\t\t\tpassword: clientSecret,\n\t\t  \t},\n\t\t};\n\n\t\tconst data = {\n\t\t\tgrant_type: 'client_credentials',\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await axios.post(\n\t\t\t\t'https://accounts.spotify.com/api/token',\n\t\t\t\tqs.stringify(data),\n\t\t\t\theaders\n\t\t  \t);\n\t\t  \tthis.setState({ token: response.data.access_token });\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\t};\n\n\thandleSubmit = () => {\n\t\tconst { input, token, type } = this.state;\n\t\tif (!input) return;\n\t\tfetch(`https://api.spotify.com/v1/search?access_token=${token}&q=${input}&type=${type}&limit=10&market=US`)\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => {\n\t\t\t\tconsole.log(data[`${type}s`].items)\n\t\t\t\tthis.setState({\n\t\t\t\t\tresults: data[`${type}s`].items,\n\t\t\t\t});\n\t\t\t})\n\t}\n\n\thandleInput = (e) => {\n\t\tthis.setState({\n\t\t\tinput: e.target.value\n\t\t});\n\t}\n\n\thandleFilterType = (e) => {\n\t\tthis.setState({\n\t\t\ttype: e.target.value,\n\t\t});\n\t}\n\n\thandleSort = () => {\n\t\tconst results = this.state.results.reverse();\n\t\tthis.setState({ results });\n\t}\n\n\trenderResults = () => {\n\t\tconst { results } = this.state;\n\t\treturn (\n\t\t\t<div className=\"results\">\n\t\t\t\t{results.map((result, key) => {\n\t\t\t\t\tconst data = result.album ? result.album : result ;\n\t\t\t\t\tconst { artists, images, name, release_date } = data;\n\t\t\t\t\tconst href = images[0].url;\n\t\t\t\t\tconst artist = artists ? artists[0].name : null;\n\t\t\t\t\tconst date = release_date ? `${release_date.split('-')[0]}` : null;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"result\" key={key}>\n\t\t\t\t\t\t\t<img className=\"result-image\" src={href} />\n\t\t\t\t\t\t\t<div className=\"result-album\">{name}</div>\n\t\t\t\t\t\t\t{artist ? <div className=\"result-artist\">{artist}</div> : ''}\n\t\t\t\t\t\t\t{release_date ? <div className=\"result-date\">{date}</div> : ''}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n\n  \trender() {\n\t\tconst results = this.renderResults();\n    \treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<div className=\"container-search\">\n\t\t\t\t\t<div className=\"subtitle\">Search</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\tplaceholder=\"Artists, Albums, Songs\"\n\t\t\t\t\t\tclassName=\"search\"\n\t\t\t\t\t\tonChange={this.handleInput}\n\t\t\t\t\t\tonKeyPress={this.handleKeyPress}\n\t\t\t\t\t/>\n\t\t\t\t\t<select className=\"filter\" onChange={this.handleFilterType}>\n\t\t\t\t\t\t<option value='album'>Album</option>\n\t\t\t\t\t\t<option value='artist'>Artist</option>\n\t\t\t\t\t\t<option value='track'>Track</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t<div className=\"submit\" onClick={this.handleSubmit}>Search</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"container-results\">\n\t\t\t\t\t<div className=\"subtitle\">Results</div>\n\t\t\t\t\t<select className=\"sort\" onChange={this.handleSort}>\n\t\t\t\t\t\t<option value='album'>Ascending</option>\n\t\t\t\t\t\t<option value='artist'>Descending</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t{results}\n\t\t\t\t</div>\n\t\t\t</div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}